Grammar

    0 $accept: prog_start $end

    1 prog_start: progInner

    2 progInner: function progInner
    3          | /* empty */

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS funcInnerOne END_PARAMS BEGIN_LOCALS funcInnerOne END_LOCALS BEGIN_BODY funcInnerTwo END_BODY

    5 ident: IDENT

    6 funcInnerOne: declaration SEMICOLON funcInnerOne
    7             | /* empty */

    8 funcInnerTwo: statement SEMICOLON funcInnerTwo
    9             | /* empty */

   10 declaration: decInner COLON INTEGER
   11            | decInner COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

   12 decInner: ident
   13         | ident COMMA decInner

   14 statement: var ASSIGN expression
   15          | IF bool_expr THEN stateInnerOne ENDIF
   16          | IF bool_expr THEN stateInnerOne ELSE stateInnerOne ENDIF
   17          | WHILE bool_expr BEGINLOOP stateInnerOne ENDLOOP
   18          | DO BEGINLOOP stateInnerOne ENDLOOP WHILE bool_expr
   19          | FOR var ASSIGN NUMBER SEMICOLON bool_expr SEMICOLON var ASSIGN expression BEGINLOOP stateInnerOne ENDLOOP
   20          | READ stateInnerTwo
   21          | WRITE stateInnerTwo
   22          | CONTINUE
   23          | RETURN expression

   24 stateInnerOne: statement SEMICOLON stateInnerOne
   25              | statement SEMICOLON

   26 stateInnerTwo: var
   27              | var COMMA stateInnerTwo

   28 bool_expr: relation_and_expr
   29          | relation_and_expr OR bool_expr

   30 relation_and_expr: relation_expr
   31                  | relation_expr AND relation_and_expr

   32 relation_expr: expression comp expression
   33              | TRUE
   34              | FALSE
   35              | L_PAREN bool_expr R_PAREN
   36              | NOT expression comp expression
   37              | NOT TRUE
   38              | NOT FALSE
   39              | NOT L_PAREN bool_expr R_PAREN

   40 comp: EQ
   41     | NEQ
   42     | LT
   43     | GT
   44     | LTE
   45     | GTE

   46 expression: multiplicative_expr
   47           | multiplicative_expr ADD expression
   48           | multiplicative_expr SUB expression

   49 multiplicative_expr: term
   50                    | term MULT multiplicative_expr
   51                    | term DIV multiplicative_expr
   52                    | term MOD multiplicative_expr

   53 term: var
   54     | NUMBER
   55     | L_PAREN expression R_PAREN
   56     | SUB var
   57     | SUB NUMBER
   58     | SUB L_PAREN expression R_PAREN
   59     | ident L_PAREN termInnerOne R_PAREN

   60 termInnerOne: expression COMMA termInnerOne
   61             | expression
   62             | /* empty */

   63 var: ident
   64    | ident L_SQUARE_BRACKET expression R_SQUARE_BRACKET


Terminals, with rules where they appear

$end (0) 0
error (256)
FUNCTION (258) 4
BEGIN_PARAMS (259) 4
END_PARAMS (260) 4
BEGIN_LOCALS (261) 4
END_LOCALS (262) 4
BEGIN_BODY (263) 4
END_BODY (264) 4
INTEGER (265) 10 11
ARRAY (266) 11
OF (267) 11
IF (268) 15 16
THEN (269) 15 16
ENDIF (270) 15 16
ELSE (271) 16
FOR (272) 19
WHILE (273) 17 18
DO (274) 18
BEGINLOOP (275) 17 18 19
ENDLOOP (276) 17 18 19
CONTINUE (277) 22
READ (278) 20
WRITE (279) 21
AND (280) 31
OR (281) 29
NOT (282) 36 37 38 39
TRUE (283) 33 37
FALSE (284) 34 38
RETURN (285) 23
SUB (286) 48 56 57 58
ADD (287) 47
MULT (288) 50
DIV (289) 51
MOD (290) 52
EQ (291) 40
NEQ (292) 41
LT (293) 42
GT (294) 43
LTE (295) 44
GTE (296) 45
SEMICOLON (297) 4 6 8 19 24 25
COLON (298) 10 11
COMMA (299) 13 27 60
L_PAREN (300) 35 39 55 58 59
R_PAREN (301) 35 39 55 58 59
L_SQUARE_BRACKET (302) 11 64
R_SQUARE_BRACKET (303) 11 64
ASSIGN (304) 14 19
NUMBER (305) 11 19 54 57
IDENT (306) 5


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
prog_start (53)
    on left: 1, on right: 0
progInner (54)
    on left: 2 3, on right: 1 2
function (55)
    on left: 4, on right: 2
ident (56)
    on left: 5, on right: 4 12 13 59 63 64
funcInnerOne (57)
    on left: 6 7, on right: 4 6
funcInnerTwo (58)
    on left: 8 9, on right: 4 8
declaration (59)
    on left: 10 11, on right: 6
decInner (60)
    on left: 12 13, on right: 10 11 13
statement (61)
    on left: 14 15 16 17 18 19 20 21 22 23, on right: 8 24 25
stateInnerOne (62)
    on left: 24 25, on right: 15 16 17 18 19 24
stateInnerTwo (63)
    on left: 26 27, on right: 20 21 27
bool_expr (64)
    on left: 28 29, on right: 15 16 17 18 19 29 35 39
relation_and_expr (65)
    on left: 30 31, on right: 28 29 31
relation_expr (66)
    on left: 32 33 34 35 36 37 38 39, on right: 30 31
comp (67)
    on left: 40 41 42 43 44 45, on right: 32 36
expression (68)
    on left: 46 47 48, on right: 14 19 23 32 36 47 48 55 58 60 61 64
multiplicative_expr (69)
    on left: 49 50 51 52, on right: 46 47 48 50 51 52
term (70)
    on left: 53 54 55 56 57 58 59, on right: 49 50 51 52
termInnerOne (71)
    on left: 60 61 62, on right: 59 60
var (72)
    on left: 63 64, on right: 14 19 26 27 53 56


state 0

    0 $accept: . prog_start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (progInner)

    prog_start  go to state 2
    progInner   go to state 3
    function    go to state 4


state 1

    4 function: FUNCTION . ident SEMICOLON BEGIN_PARAMS funcInnerOne END_PARAMS BEGIN_LOCALS funcInnerOne END_LOCALS BEGIN_BODY funcInnerTwo END_BODY

    IDENT  shift, and go to state 5

    ident  go to state 6


state 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 7


state 3

    1 prog_start: progInner .

    $default  reduce using rule 1 (prog_start)


state 4

    2 progInner: function . progInner

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (progInner)

    progInner  go to state 8
    function   go to state 4


state 5

    5 ident: IDENT .

    $default  reduce using rule 5 (ident)


state 6

    4 function: FUNCTION ident . SEMICOLON BEGIN_PARAMS funcInnerOne END_PARAMS BEGIN_LOCALS funcInnerOne END_LOCALS BEGIN_BODY funcInnerTwo END_BODY

    SEMICOLON  shift, and go to state 9


state 7

    0 $accept: prog_start $end .

    $default  accept


state 8

    2 progInner: function progInner .

    $default  reduce using rule 2 (progInner)


state 9

    4 function: FUNCTION ident SEMICOLON . BEGIN_PARAMS funcInnerOne END_PARAMS BEGIN_LOCALS funcInnerOne END_LOCALS BEGIN_BODY funcInnerTwo END_BODY

    BEGIN_PARAMS  shift, and go to state 10


state 10

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS . funcInnerOne END_PARAMS BEGIN_LOCALS funcInnerOne END_LOCALS BEGIN_BODY funcInnerTwo END_BODY

    IDENT  shift, and go to state 5

    $default  reduce using rule 7 (funcInnerOne)

    ident         go to state 11
    funcInnerOne  go to state 12
    declaration   go to state 13
    decInner      go to state 14


state 11

   12 decInner: ident .
   13         | ident . COMMA decInner

    COMMA  shift, and go to state 15

    $default  reduce using rule 12 (decInner)


state 12

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS funcInnerOne . END_PARAMS BEGIN_LOCALS funcInnerOne END_LOCALS BEGIN_BODY funcInnerTwo END_BODY

    END_PARAMS  shift, and go to state 16


state 13

    6 funcInnerOne: declaration . SEMICOLON funcInnerOne

    SEMICOLON  shift, and go to state 17


state 14

   10 declaration: decInner . COLON INTEGER
   11            | decInner . COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    COLON  shift, and go to state 18


state 15

   13 decInner: ident COMMA . decInner

    IDENT  shift, and go to state 5

    ident     go to state 11
    decInner  go to state 19


state 16

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS funcInnerOne END_PARAMS . BEGIN_LOCALS funcInnerOne END_LOCALS BEGIN_BODY funcInnerTwo END_BODY

    BEGIN_LOCALS  shift, and go to state 20


state 17

    6 funcInnerOne: declaration SEMICOLON . funcInnerOne

    IDENT  shift, and go to state 5

    $default  reduce using rule 7 (funcInnerOne)

    ident         go to state 11
    funcInnerOne  go to state 21
    declaration   go to state 13
    decInner      go to state 14


state 18

   10 declaration: decInner COLON . INTEGER
   11            | decInner COLON . ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    INTEGER  shift, and go to state 22
    ARRAY    shift, and go to state 23


state 19

   13 decInner: ident COMMA decInner .

    $default  reduce using rule 13 (decInner)


state 20

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS funcInnerOne END_PARAMS BEGIN_LOCALS . funcInnerOne END_LOCALS BEGIN_BODY funcInnerTwo END_BODY

    IDENT  shift, and go to state 5

    $default  reduce using rule 7 (funcInnerOne)

    ident         go to state 11
    funcInnerOne  go to state 24
    declaration   go to state 13
    decInner      go to state 14


state 21

    6 funcInnerOne: declaration SEMICOLON funcInnerOne .

    $default  reduce using rule 6 (funcInnerOne)


state 22

   10 declaration: decInner COLON INTEGER .

    $default  reduce using rule 10 (declaration)


state 23

   11 declaration: decInner COLON ARRAY . L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    L_SQUARE_BRACKET  shift, and go to state 25


state 24

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS funcInnerOne END_PARAMS BEGIN_LOCALS funcInnerOne . END_LOCALS BEGIN_BODY funcInnerTwo END_BODY

    END_LOCALS  shift, and go to state 26


state 25

   11 declaration: decInner COLON ARRAY L_SQUARE_BRACKET . NUMBER R_SQUARE_BRACKET OF INTEGER

    NUMBER  shift, and go to state 27


state 26

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS funcInnerOne END_PARAMS BEGIN_LOCALS funcInnerOne END_LOCALS . BEGIN_BODY funcInnerTwo END_BODY

    BEGIN_BODY  shift, and go to state 28


state 27

   11 declaration: decInner COLON ARRAY L_SQUARE_BRACKET NUMBER . R_SQUARE_BRACKET OF INTEGER

    R_SQUARE_BRACKET  shift, and go to state 29


state 28

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS funcInnerOne END_PARAMS BEGIN_LOCALS funcInnerOne END_LOCALS BEGIN_BODY . funcInnerTwo END_BODY

    IF        shift, and go to state 30
    FOR       shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    CONTINUE  shift, and go to state 34
    READ      shift, and go to state 35
    WRITE     shift, and go to state 36
    RETURN    shift, and go to state 37
    IDENT     shift, and go to state 5

    $default  reduce using rule 9 (funcInnerTwo)

    ident         go to state 38
    funcInnerTwo  go to state 39
    statement     go to state 40
    var           go to state 41


state 29

   11 declaration: decInner COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET . OF INTEGER

    OF  shift, and go to state 42


state 30

   15 statement: IF . bool_expr THEN stateInnerOne ENDIF
   16          | IF . bool_expr THEN stateInnerOne ELSE stateInnerOne ENDIF

    NOT      shift, and go to state 43
    TRUE     shift, and go to state 44
    FALSE    shift, and go to state 45
    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 47
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    bool_expr            go to state 50
    relation_and_expr    go to state 51
    relation_expr        go to state 52
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 31

   19 statement: FOR . var ASSIGN NUMBER SEMICOLON bool_expr SEMICOLON var ASSIGN expression BEGINLOOP stateInnerOne ENDLOOP

    IDENT  shift, and go to state 5

    ident  go to state 38
    var    go to state 57


state 32

   17 statement: WHILE . bool_expr BEGINLOOP stateInnerOne ENDLOOP

    NOT      shift, and go to state 43
    TRUE     shift, and go to state 44
    FALSE    shift, and go to state 45
    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 47
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    bool_expr            go to state 58
    relation_and_expr    go to state 51
    relation_expr        go to state 52
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 33

   18 statement: DO . BEGINLOOP stateInnerOne ENDLOOP WHILE bool_expr

    BEGINLOOP  shift, and go to state 59


state 34

   22 statement: CONTINUE .

    $default  reduce using rule 22 (statement)


state 35

   20 statement: READ . stateInnerTwo

    IDENT  shift, and go to state 5

    ident          go to state 38
    stateInnerTwo  go to state 60
    var            go to state 61


state 36

   21 statement: WRITE . stateInnerTwo

    IDENT  shift, and go to state 5

    ident          go to state 38
    stateInnerTwo  go to state 62
    var            go to state 61


state 37

   23 statement: RETURN . expression

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    expression           go to state 64
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 38

   63 var: ident .
   64    | ident . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    L_SQUARE_BRACKET  shift, and go to state 65

    $default  reduce using rule 63 (var)


state 39

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS funcInnerOne END_PARAMS BEGIN_LOCALS funcInnerOne END_LOCALS BEGIN_BODY funcInnerTwo . END_BODY

    END_BODY  shift, and go to state 66


state 40

    8 funcInnerTwo: statement . SEMICOLON funcInnerTwo

    SEMICOLON  shift, and go to state 67


state 41

   14 statement: var . ASSIGN expression

    ASSIGN  shift, and go to state 68


state 42

   11 declaration: decInner COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 69


state 43

   36 relation_expr: NOT . expression comp expression
   37              | NOT . TRUE
   38              | NOT . FALSE
   39              | NOT . L_PAREN bool_expr R_PAREN

    TRUE     shift, and go to state 70
    FALSE    shift, and go to state 71
    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 72
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    expression           go to state 73
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 44

   33 relation_expr: TRUE .

    $default  reduce using rule 33 (relation_expr)


state 45

   34 relation_expr: FALSE .

    $default  reduce using rule 34 (relation_expr)


state 46

   56 term: SUB . var
   57     | SUB . NUMBER
   58     | SUB . L_PAREN expression R_PAREN

    L_PAREN  shift, and go to state 74
    NUMBER   shift, and go to state 75
    IDENT    shift, and go to state 5

    ident  go to state 38
    var    go to state 76


state 47

   35 relation_expr: L_PAREN . bool_expr R_PAREN
   55 term: L_PAREN . expression R_PAREN

    NOT      shift, and go to state 43
    TRUE     shift, and go to state 44
    FALSE    shift, and go to state 45
    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 47
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    bool_expr            go to state 77
    relation_and_expr    go to state 51
    relation_expr        go to state 52
    expression           go to state 78
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 48

   54 term: NUMBER .

    $default  reduce using rule 54 (term)


state 49

   59 term: ident . L_PAREN termInnerOne R_PAREN
   63 var: ident .
   64    | ident . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    L_PAREN           shift, and go to state 79
    L_SQUARE_BRACKET  shift, and go to state 65

    $default  reduce using rule 63 (var)


state 50

   15 statement: IF bool_expr . THEN stateInnerOne ENDIF
   16          | IF bool_expr . THEN stateInnerOne ELSE stateInnerOne ENDIF

    THEN  shift, and go to state 80


state 51

   28 bool_expr: relation_and_expr .
   29          | relation_and_expr . OR bool_expr

    OR  shift, and go to state 81

    $default  reduce using rule 28 (bool_expr)


state 52

   30 relation_and_expr: relation_expr .
   31                  | relation_expr . AND relation_and_expr

    AND  shift, and go to state 82

    $default  reduce using rule 30 (relation_and_expr)


state 53

   32 relation_expr: expression . comp expression

    EQ   shift, and go to state 83
    NEQ  shift, and go to state 84
    LT   shift, and go to state 85
    GT   shift, and go to state 86
    LTE  shift, and go to state 87
    GTE  shift, and go to state 88

    comp  go to state 89


state 54

   46 expression: multiplicative_expr .
   47           | multiplicative_expr . ADD expression
   48           | multiplicative_expr . SUB expression

    SUB  shift, and go to state 90
    ADD  shift, and go to state 91

    $default  reduce using rule 46 (expression)


state 55

   49 multiplicative_expr: term .
   50                    | term . MULT multiplicative_expr
   51                    | term . DIV multiplicative_expr
   52                    | term . MOD multiplicative_expr

    MULT  shift, and go to state 92
    DIV   shift, and go to state 93
    MOD   shift, and go to state 94

    $default  reduce using rule 49 (multiplicative_expr)


state 56

   53 term: var .

    $default  reduce using rule 53 (term)


state 57

   19 statement: FOR var . ASSIGN NUMBER SEMICOLON bool_expr SEMICOLON var ASSIGN expression BEGINLOOP stateInnerOne ENDLOOP

    ASSIGN  shift, and go to state 95


state 58

   17 statement: WHILE bool_expr . BEGINLOOP stateInnerOne ENDLOOP

    BEGINLOOP  shift, and go to state 96


state 59

   18 statement: DO BEGINLOOP . stateInnerOne ENDLOOP WHILE bool_expr

    IF        shift, and go to state 30
    FOR       shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    CONTINUE  shift, and go to state 34
    READ      shift, and go to state 35
    WRITE     shift, and go to state 36
    RETURN    shift, and go to state 37
    IDENT     shift, and go to state 5

    ident          go to state 38
    statement      go to state 97
    stateInnerOne  go to state 98
    var            go to state 41


state 60

   20 statement: READ stateInnerTwo .

    $default  reduce using rule 20 (statement)


state 61

   26 stateInnerTwo: var .
   27              | var . COMMA stateInnerTwo

    COMMA  shift, and go to state 99

    $default  reduce using rule 26 (stateInnerTwo)


state 62

   21 statement: WRITE stateInnerTwo .

    $default  reduce using rule 21 (statement)


state 63

   55 term: L_PAREN . expression R_PAREN

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    expression           go to state 100
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 64

   23 statement: RETURN expression .

    $default  reduce using rule 23 (statement)


state 65

   64 var: ident L_SQUARE_BRACKET . expression R_SQUARE_BRACKET

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    expression           go to state 101
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 66

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS funcInnerOne END_PARAMS BEGIN_LOCALS funcInnerOne END_LOCALS BEGIN_BODY funcInnerTwo END_BODY .

    $default  reduce using rule 4 (function)


state 67

    8 funcInnerTwo: statement SEMICOLON . funcInnerTwo

    IF        shift, and go to state 30
    FOR       shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    CONTINUE  shift, and go to state 34
    READ      shift, and go to state 35
    WRITE     shift, and go to state 36
    RETURN    shift, and go to state 37
    IDENT     shift, and go to state 5

    $default  reduce using rule 9 (funcInnerTwo)

    ident         go to state 38
    funcInnerTwo  go to state 102
    statement     go to state 40
    var           go to state 41


state 68

   14 statement: var ASSIGN . expression

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    expression           go to state 103
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 69

   11 declaration: decInner COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER .

    $default  reduce using rule 11 (declaration)


state 70

   37 relation_expr: NOT TRUE .

    $default  reduce using rule 37 (relation_expr)


state 71

   38 relation_expr: NOT FALSE .

    $default  reduce using rule 38 (relation_expr)


state 72

   39 relation_expr: NOT L_PAREN . bool_expr R_PAREN
   55 term: L_PAREN . expression R_PAREN

    NOT      shift, and go to state 43
    TRUE     shift, and go to state 44
    FALSE    shift, and go to state 45
    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 47
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    bool_expr            go to state 104
    relation_and_expr    go to state 51
    relation_expr        go to state 52
    expression           go to state 78
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 73

   36 relation_expr: NOT expression . comp expression

    EQ   shift, and go to state 83
    NEQ  shift, and go to state 84
    LT   shift, and go to state 85
    GT   shift, and go to state 86
    LTE  shift, and go to state 87
    GTE  shift, and go to state 88

    comp  go to state 105


state 74

   58 term: SUB L_PAREN . expression R_PAREN

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    expression           go to state 106
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 75

   57 term: SUB NUMBER .

    $default  reduce using rule 57 (term)


state 76

   56 term: SUB var .

    $default  reduce using rule 56 (term)


state 77

   35 relation_expr: L_PAREN bool_expr . R_PAREN

    R_PAREN  shift, and go to state 107


state 78

   32 relation_expr: expression . comp expression
   55 term: L_PAREN expression . R_PAREN

    EQ       shift, and go to state 83
    NEQ      shift, and go to state 84
    LT       shift, and go to state 85
    GT       shift, and go to state 86
    LTE      shift, and go to state 87
    GTE      shift, and go to state 88
    R_PAREN  shift, and go to state 108

    comp  go to state 89


state 79

   59 term: ident L_PAREN . termInnerOne R_PAREN

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    $default  reduce using rule 62 (termInnerOne)

    ident                go to state 49
    expression           go to state 109
    multiplicative_expr  go to state 54
    term                 go to state 55
    termInnerOne         go to state 110
    var                  go to state 56


state 80

   15 statement: IF bool_expr THEN . stateInnerOne ENDIF
   16          | IF bool_expr THEN . stateInnerOne ELSE stateInnerOne ENDIF

    IF        shift, and go to state 30
    FOR       shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    CONTINUE  shift, and go to state 34
    READ      shift, and go to state 35
    WRITE     shift, and go to state 36
    RETURN    shift, and go to state 37
    IDENT     shift, and go to state 5

    ident          go to state 38
    statement      go to state 97
    stateInnerOne  go to state 111
    var            go to state 41


state 81

   29 bool_expr: relation_and_expr OR . bool_expr

    NOT      shift, and go to state 43
    TRUE     shift, and go to state 44
    FALSE    shift, and go to state 45
    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 47
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    bool_expr            go to state 112
    relation_and_expr    go to state 51
    relation_expr        go to state 52
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 82

   31 relation_and_expr: relation_expr AND . relation_and_expr

    NOT      shift, and go to state 43
    TRUE     shift, and go to state 44
    FALSE    shift, and go to state 45
    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 47
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    relation_and_expr    go to state 113
    relation_expr        go to state 52
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 83

   40 comp: EQ .

    $default  reduce using rule 40 (comp)


state 84

   41 comp: NEQ .

    $default  reduce using rule 41 (comp)


state 85

   42 comp: LT .

    $default  reduce using rule 42 (comp)


state 86

   43 comp: GT .

    $default  reduce using rule 43 (comp)


state 87

   44 comp: LTE .

    $default  reduce using rule 44 (comp)


state 88

   45 comp: GTE .

    $default  reduce using rule 45 (comp)


state 89

   32 relation_expr: expression comp . expression

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    expression           go to state 114
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 90

   48 expression: multiplicative_expr SUB . expression

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    expression           go to state 115
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 91

   47 expression: multiplicative_expr ADD . expression

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    expression           go to state 116
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 92

   50 multiplicative_expr: term MULT . multiplicative_expr

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    multiplicative_expr  go to state 117
    term                 go to state 55
    var                  go to state 56


state 93

   51 multiplicative_expr: term DIV . multiplicative_expr

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    multiplicative_expr  go to state 118
    term                 go to state 55
    var                  go to state 56


state 94

   52 multiplicative_expr: term MOD . multiplicative_expr

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    multiplicative_expr  go to state 119
    term                 go to state 55
    var                  go to state 56


state 95

   19 statement: FOR var ASSIGN . NUMBER SEMICOLON bool_expr SEMICOLON var ASSIGN expression BEGINLOOP stateInnerOne ENDLOOP

    NUMBER  shift, and go to state 120


state 96

   17 statement: WHILE bool_expr BEGINLOOP . stateInnerOne ENDLOOP

    IF        shift, and go to state 30
    FOR       shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    CONTINUE  shift, and go to state 34
    READ      shift, and go to state 35
    WRITE     shift, and go to state 36
    RETURN    shift, and go to state 37
    IDENT     shift, and go to state 5

    ident          go to state 38
    statement      go to state 97
    stateInnerOne  go to state 121
    var            go to state 41


state 97

   24 stateInnerOne: statement . SEMICOLON stateInnerOne
   25              | statement . SEMICOLON

    SEMICOLON  shift, and go to state 122


state 98

   18 statement: DO BEGINLOOP stateInnerOne . ENDLOOP WHILE bool_expr

    ENDLOOP  shift, and go to state 123


state 99

   27 stateInnerTwo: var COMMA . stateInnerTwo

    IDENT  shift, and go to state 5

    ident          go to state 38
    stateInnerTwo  go to state 124
    var            go to state 61


state 100

   55 term: L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 108


state 101

   64 var: ident L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 125


state 102

    8 funcInnerTwo: statement SEMICOLON funcInnerTwo .

    $default  reduce using rule 8 (funcInnerTwo)


state 103

   14 statement: var ASSIGN expression .

    $default  reduce using rule 14 (statement)


state 104

   39 relation_expr: NOT L_PAREN bool_expr . R_PAREN

    R_PAREN  shift, and go to state 126


state 105

   36 relation_expr: NOT expression comp . expression

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    expression           go to state 127
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 106

   58 term: SUB L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 128


state 107

   35 relation_expr: L_PAREN bool_expr R_PAREN .

    $default  reduce using rule 35 (relation_expr)


state 108

   55 term: L_PAREN expression R_PAREN .

    $default  reduce using rule 55 (term)


state 109

   60 termInnerOne: expression . COMMA termInnerOne
   61             | expression .

    COMMA  shift, and go to state 129

    $default  reduce using rule 61 (termInnerOne)


state 110

   59 term: ident L_PAREN termInnerOne . R_PAREN

    R_PAREN  shift, and go to state 130


state 111

   15 statement: IF bool_expr THEN stateInnerOne . ENDIF
   16          | IF bool_expr THEN stateInnerOne . ELSE stateInnerOne ENDIF

    ENDIF  shift, and go to state 131
    ELSE   shift, and go to state 132


state 112

   29 bool_expr: relation_and_expr OR bool_expr .

    $default  reduce using rule 29 (bool_expr)


state 113

   31 relation_and_expr: relation_expr AND relation_and_expr .

    $default  reduce using rule 31 (relation_and_expr)


state 114

   32 relation_expr: expression comp expression .

    $default  reduce using rule 32 (relation_expr)


state 115

   48 expression: multiplicative_expr SUB expression .

    $default  reduce using rule 48 (expression)


state 116

   47 expression: multiplicative_expr ADD expression .

    $default  reduce using rule 47 (expression)


state 117

   50 multiplicative_expr: term MULT multiplicative_expr .

    $default  reduce using rule 50 (multiplicative_expr)


state 118

   51 multiplicative_expr: term DIV multiplicative_expr .

    $default  reduce using rule 51 (multiplicative_expr)


state 119

   52 multiplicative_expr: term MOD multiplicative_expr .

    $default  reduce using rule 52 (multiplicative_expr)


state 120

   19 statement: FOR var ASSIGN NUMBER . SEMICOLON bool_expr SEMICOLON var ASSIGN expression BEGINLOOP stateInnerOne ENDLOOP

    SEMICOLON  shift, and go to state 133


state 121

   17 statement: WHILE bool_expr BEGINLOOP stateInnerOne . ENDLOOP

    ENDLOOP  shift, and go to state 134


state 122

   24 stateInnerOne: statement SEMICOLON . stateInnerOne
   25              | statement SEMICOLON .

    IF        shift, and go to state 30
    FOR       shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    CONTINUE  shift, and go to state 34
    READ      shift, and go to state 35
    WRITE     shift, and go to state 36
    RETURN    shift, and go to state 37
    IDENT     shift, and go to state 5

    $default  reduce using rule 25 (stateInnerOne)

    ident          go to state 38
    statement      go to state 97
    stateInnerOne  go to state 135
    var            go to state 41


state 123

   18 statement: DO BEGINLOOP stateInnerOne ENDLOOP . WHILE bool_expr

    WHILE  shift, and go to state 136


state 124

   27 stateInnerTwo: var COMMA stateInnerTwo .

    $default  reduce using rule 27 (stateInnerTwo)


state 125

   64 var: ident L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    $default  reduce using rule 64 (var)


state 126

   39 relation_expr: NOT L_PAREN bool_expr R_PAREN .

    $default  reduce using rule 39 (relation_expr)


state 127

   36 relation_expr: NOT expression comp expression .

    $default  reduce using rule 36 (relation_expr)


state 128

   58 term: SUB L_PAREN expression R_PAREN .

    $default  reduce using rule 58 (term)


state 129

   60 termInnerOne: expression COMMA . termInnerOne

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    $default  reduce using rule 62 (termInnerOne)

    ident                go to state 49
    expression           go to state 109
    multiplicative_expr  go to state 54
    term                 go to state 55
    termInnerOne         go to state 137
    var                  go to state 56


state 130

   59 term: ident L_PAREN termInnerOne R_PAREN .

    $default  reduce using rule 59 (term)


state 131

   15 statement: IF bool_expr THEN stateInnerOne ENDIF .

    $default  reduce using rule 15 (statement)


state 132

   16 statement: IF bool_expr THEN stateInnerOne ELSE . stateInnerOne ENDIF

    IF        shift, and go to state 30
    FOR       shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    CONTINUE  shift, and go to state 34
    READ      shift, and go to state 35
    WRITE     shift, and go to state 36
    RETURN    shift, and go to state 37
    IDENT     shift, and go to state 5

    ident          go to state 38
    statement      go to state 97
    stateInnerOne  go to state 138
    var            go to state 41


state 133

   19 statement: FOR var ASSIGN NUMBER SEMICOLON . bool_expr SEMICOLON var ASSIGN expression BEGINLOOP stateInnerOne ENDLOOP

    NOT      shift, and go to state 43
    TRUE     shift, and go to state 44
    FALSE    shift, and go to state 45
    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 47
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    bool_expr            go to state 139
    relation_and_expr    go to state 51
    relation_expr        go to state 52
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 134

   17 statement: WHILE bool_expr BEGINLOOP stateInnerOne ENDLOOP .

    $default  reduce using rule 17 (statement)


state 135

   24 stateInnerOne: statement SEMICOLON stateInnerOne .

    $default  reduce using rule 24 (stateInnerOne)


state 136

   18 statement: DO BEGINLOOP stateInnerOne ENDLOOP WHILE . bool_expr

    NOT      shift, and go to state 43
    TRUE     shift, and go to state 44
    FALSE    shift, and go to state 45
    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 47
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    bool_expr            go to state 140
    relation_and_expr    go to state 51
    relation_expr        go to state 52
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 137

   60 termInnerOne: expression COMMA termInnerOne .

    $default  reduce using rule 60 (termInnerOne)


state 138

   16 statement: IF bool_expr THEN stateInnerOne ELSE stateInnerOne . ENDIF

    ENDIF  shift, and go to state 141


state 139

   19 statement: FOR var ASSIGN NUMBER SEMICOLON bool_expr . SEMICOLON var ASSIGN expression BEGINLOOP stateInnerOne ENDLOOP

    SEMICOLON  shift, and go to state 142


state 140

   18 statement: DO BEGINLOOP stateInnerOne ENDLOOP WHILE bool_expr .

    $default  reduce using rule 18 (statement)


state 141

   16 statement: IF bool_expr THEN stateInnerOne ELSE stateInnerOne ENDIF .

    $default  reduce using rule 16 (statement)


state 142

   19 statement: FOR var ASSIGN NUMBER SEMICOLON bool_expr SEMICOLON . var ASSIGN expression BEGINLOOP stateInnerOne ENDLOOP

    IDENT  shift, and go to state 5

    ident  go to state 38
    var    go to state 143


state 143

   19 statement: FOR var ASSIGN NUMBER SEMICOLON bool_expr SEMICOLON var . ASSIGN expression BEGINLOOP stateInnerOne ENDLOOP

    ASSIGN  shift, and go to state 144


state 144

   19 statement: FOR var ASSIGN NUMBER SEMICOLON bool_expr SEMICOLON var ASSIGN . expression BEGINLOOP stateInnerOne ENDLOOP

    SUB      shift, and go to state 46
    L_PAREN  shift, and go to state 63
    NUMBER   shift, and go to state 48
    IDENT    shift, and go to state 5

    ident                go to state 49
    expression           go to state 145
    multiplicative_expr  go to state 54
    term                 go to state 55
    var                  go to state 56


state 145

   19 statement: FOR var ASSIGN NUMBER SEMICOLON bool_expr SEMICOLON var ASSIGN expression . BEGINLOOP stateInnerOne ENDLOOP

    BEGINLOOP  shift, and go to state 146


state 146

   19 statement: FOR var ASSIGN NUMBER SEMICOLON bool_expr SEMICOLON var ASSIGN expression BEGINLOOP . stateInnerOne ENDLOOP

    IF        shift, and go to state 30
    FOR       shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    CONTINUE  shift, and go to state 34
    READ      shift, and go to state 35
    WRITE     shift, and go to state 36
    RETURN    shift, and go to state 37
    IDENT     shift, and go to state 5

    ident          go to state 38
    statement      go to state 97
    stateInnerOne  go to state 147
    var            go to state 41


state 147

   19 statement: FOR var ASSIGN NUMBER SEMICOLON bool_expr SEMICOLON var ASSIGN expression BEGINLOOP stateInnerOne . ENDLOOP

    ENDLOOP  shift, and go to state 148


state 148

   19 statement: FOR var ASSIGN NUMBER SEMICOLON bool_expr SEMICOLON var ASSIGN expression BEGINLOOP stateInnerOne ENDLOOP .

    $default  reduce using rule 19 (statement)
